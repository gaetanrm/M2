----QUIT----2022-09-06T11:28:24.088812+02:00 Pharo9.0-SNAPSHOT-64bit-e1bb0fb.image priorSource: 0!----QUIT----2022-09-06T11:29:02.171389+02:00 Pharo9.0-SNAPSHOT-64bit-e1bb0fb.image priorSource: 0!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite' 	classVariableNames: 'tailleDefaut'	package: 'HAI914I'!!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:35'!push: anObject	"met anObject dans contenu au bon index si la pile n'est pas pleine"	self isFull		ifFalse: [			index := index + 1.			contenu at: index put: anObject.]		ifTrue: [ self error: 'Impossible d''empiler sur une pile pleine' ]! !!Pile methodsFor: 'adding' stamp: 'RomeroGaetan 9/26/2022 18:37'!isEmpty	^index = 0! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:37'!isFull	^index = capacite.! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:38'!pop	"dépile et rend le sommet de pile si la pile n'est pas vide"	| retour |	self isEmpty		ifFalse: [			retour := contenu at: index.			index := index - 1.			^retour]		ifTrue: [ self error: 'Pile vide, Impossible de dépiler' ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:39'!top	"rend le sommet de pile si la pile n'est pas vide, sans dépiler"	self isEmpty		ifFalse: [ ^contenu at: index]		ifTrue: [ self error: 'Rien au sommet d''une pile vide' ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:41'!initialize: taille	"initialise les attribus d'une pile nouvellement créée"	"la pile est vide quand index = 0"	index := 0.	"la pile est pleine quand index = capacite"	capacite := taille.	"le contenu est représenté par un tableau"	contenu := Array new: capacite.! !!Pile methodsFor: 'initialization' stamp: 'RomeroGaetan 9/26/2022 18:43' prior: 33555943!initialize: taille	"initialise les attribus d'une pile nouvellement créée"	"la pile est vide quand index = 0"	index := 0.	"la pile est pleine quand index = capacite"	capacite := taille.	"le contenu est représenté par un tableau"	contenu := Array new: capacite.		self assert: (self isEmpty).! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:44'!printOn: aStream	"Cette méthode est appelée par la méthode printString qui fabrique une représentation du    receveur sous forme de chaîne.	 PrintString est elle-même appelée par les outils de l'environnement, par exemple par la    méthode printIt du Playground."		aStream nextPutAll: 'une Pile, de taille: '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant: '.	index printOn: aStream.	aStream nextPutAll: ' objets : ('.	contenu do: [ :each | each printOn: aStream. aStream space ].	aStream nextPut: $).! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:46'!grow	| nb oldc |	nb := self size.	oldc := contenu.	capacite := capacite * 2.	contenu := Array new: capacite.	0 to: nb do: [ :i |  self push: (oldc at: i)]! !TestCase subclass: #TestPile	instanceVariableNames: 'standard pleine vide'	classVariableNames: ''	package: 'HAI914I'!!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!setUp	"une pile vide"	vide := Pile new initialize: 3.		"une pile dans un état quelconque, ni vide ni pleine"	standard := Pile new initialize: 4.	standard push: 1.		"une pile pleine"	pleine := Pile new initialize: 2.	pleine push: 1.	pleine push: 2.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!testEqual	| copy |	copy := standard shallowCopy.	self assert: standard equals: copy.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!testPush	self should: [ pleine push: #anything ] raise: Error.	self testPush: vide.	self testPush: standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:57' prior: 33558200!testPush	self should: [ pleine push: #anything ] raise: Error.	self vide.	self standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:57' prior: 33558400!testPush	self should: [ pleine push: #anything ] raise: Error.	self testPush: vide.	self testPush: standard.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:58'!testVide	self assert: vide isEmpty! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:58'!testPop: unePile	"attention à ce que standard reste standard, ni vide ni pleine, pour les autres méthodes de test"	| p1 p2 |	p1 := unePile top.	p2 := unePile pop.	self deny: unePile isFull.	self assert: p2 equals: p1.	unePile push: p1.	self assert: unePile top equals: p2.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testPop	self should: [ vide pop ] raise: Error.	self testPop: standard.	self testPop: pleine.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testEquals	self assert: standard = standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:59' prior: 33559452!testEquals	self assert: standard = standard! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testFull	self assert: pleine isFull.	self deny: standard isFull.	self deny: vide isFull.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:00'!testPush: unePile	| sauve |	sauve := unePile.	unePile push: 33.	self deny: unePile isEmpty.	self assert: unePile top equals: 33.	self assert: unePile pop equals: 33.	"on laisse la pile dans l'état ou elle était en entrant"	self assert: unePile equals: sauve.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:00'!testEmpty	"vide, standard et pleine référencent des piles  créées dans la méthode setUp"	self assert: vide isEmpty.	self deny: standard isEmpty.	self deny: pleine isEmpty.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:02'!initialize 	tailleDefaut := 5.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:08'!new 	^super initialize.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:10'!new: taille	taille	ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]	ifNotNil: [ ^super initialize: tailleDefaut  ]! !!Pile class methodsFor: 'instance creation' stamp: 'RomeroGaetan 9/26/2022 19:11' prior: 33560752!new: taille	taille		ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]		ifNotNil: [ ^super initialize: tailleDefaut  ]! !----SNAPSHOT----2022-09-26T19:13:16.834092+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 100!!Pile class methodsFor: 'instance creation' stamp: 'RomeroGaetan 9/26/2022 19:13' prior: 33560986!new: taille	taille		ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]		ifNotNil: [ ^super new initialize: taille.  ]! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:15'!example	| p |	p := Pile new.	p push: 12.	p push: 3.	p push: 4.	p top.	p pop.	p push: 45.	p push: 34.	p isFull.	p isEmpty.	^p.	! !!Pile class methodsFor: 'examples' stamp: 'RomeroGaetan 9/26/2022 19:15' prior: 33561549!example	| p |	p := self new.	p push: 12.	p push: 3.	p push: 4.	p top.	p pop.	p push: 45.	p push: 34.	p isFull.	p isEmpty.	^p.	! !----SNAPSHOT----2022-09-26T19:20:35.957946+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 6690!----QUIT----2022-09-26T19:20:44.270426+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 7492!----QUIT/NOSAVE----2022-09-26T19:29:14.339145+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 7599!Object subclass: #Counter	instanceVariableNames: '' 	classVariableNames: ''	package: 'HAI914I'!!Counter class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:31'!create 	| x |	x := 0.	^[ x := x + 1 ]! !!False methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:50'!ifNotTrue: paramBlock	^self ifFalse: paramBlock.! !!True methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:52'!ifNotTrue: paramBlock	^ self ifFalse: paramBlock.! !!True methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:52'!ifNotFalse: paramBlock	^ self ifTrue: paramBlock.! !!False methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:54'!ifNotFalse: paramBlock	^ self ifTrue: paramBlock.! !!BlockClosure methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 15:59'!repeatUntil: condition	condition		ifTrue: [ ^self repeatUntil: condition ]		ifFalse: [ ^nil ]! !!BlockClosure methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 16:00' prior: 33563098!repeatUntil: condition	self value.	condition		ifTrue: [ ^self repeatUntil: condition ]		ifFalse: [ ^nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:02' prior: 33563301!repeatUntil: condition	self value.	condition value		ifTrue: [ ^self repeatUntil: condition ]		ifFalse: [ ^nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:04' prior: 33563502!repeatUntil: condition	self value.	condition value ifTrue: [ ^self repeatUntil: condition ]						ifFalse: [ nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:04' prior: 33563709!repeatUntil: condition	self value.	(condition value) ifTrue: [ ^self repeatUntil: condition ]						ifFalse: [ nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:05' prior: 33563917!repeatUntil: condition	self value.	(condition value) 	ifTrue: [ ^self repeatUntil: condition ]	ifFalse: [ nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:05' prior: 33564127!repeatUntil: condition	self value.	condition value	ifTrue: [ ^self repeatUntil: condition ]	ifFalse: [ nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:06' prior: 33564334!repeatUntil: condition	self value.	condition value	ifFalse: [ ^self repeatUntil: condition. ]	ifTrue: [ nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:06' prior: 33564538!repeatUntil: condition	self value.	condition value	ifFalse: [ ^self repeatUntil: condition. ]	ifTrue: [ ^nil ]! !!BlockClosure methodsFor: 'loop' stamp: 'RomeroGaetan 10/3/2022 16:06' prior: 33564743!repeatUntil: condition	self value.	condition value	ifFalse: [ ^self repeatUntil: condition. ]	ifTrue: [ ^nil ]! !----SNAPSHOT----2022-10-03T16:08:56.369048+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 7599!!ManifestHAI914I commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:09'!ruleNoClassCommentRuleV1FalsePositive	^ #()! !!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:09' prior: 33565581!ruleNoClassCommentRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Pile)) #'2022-10-03T16:09:56.571869+02:00') )! !!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:10'!ruleReClassVariableCapitalizationRuleV1FalsePositive	^ #()! !!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:10' prior: 33565941!ruleReClassVariableCapitalizationRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Pile)) #'2022-10-03T16:10:11.319193+02:00') )! !!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:10'!ruleReClassNotCategorizedRuleV1FalsePositive	^ #()! !!ManifestHAI914I class methodsFor: 'code-critics' stamp: 'RomeroGaetan 10/3/2022 16:10' prior: 33566331!ruleReClassNotCategorizedRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Pile)) #'2022-10-03T16:10:14.92632+02:00') )! !!Behavior methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/3/2022 16:24'!exoInspect	^ self instVarNames.! !!Behavior methodsFor: 'introspection' stamp: 'RomeroGaetan 10/3/2022 16:29' prior: 33566698!exoInspect	^ super instVarNames.! !!Behavior methodsFor: 'introspection' stamp: 'RomeroGaetan 10/3/2022 16:31' prior: 33566827!exoInspect	^self instVarNames.! !!Behavior methodsFor: 'introspection' stamp: 'RomeroGaetan 10/3/2022 16:31' prior: 33566957!exoInspect	^self instanceVariables.! !!Behavior methodsFor: 'introspection' stamp: 'RomeroGaetan 10/3/2022 16:32' prior: 33567085!exoInspect	^super instanceVariables.! !----QUIT----2022-10-03T18:28:13.587731+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 10634!!Object methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 10/10/2022 15:22'!exoInspect 	^ self instVarNamed: self.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:24' prior: 33567445!exoInspect 	^ super instVarNamed: self.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:26' prior: 33567580!exoInspect 	^ self instVarNamed: #className.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:26' prior: 33567716!exoInspect 	^ super instVarNamed: #className.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:27' prior: 33567857!exoInspect 	^ self instVarNamed: #className.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:30' prior: 33567999!exoInspect 	^ self instVarNamed: self className.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:36' prior: 33568140!exoInspect 	^ self instVarNamed: #index.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:42' prior: 33568285!exoInspect 	 	^ self instVarNamed: #index.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:48' prior: 33568422!exoInspect 	 	| listVar instVar |	listVar := self instVarNames.	instVar := listVar pop.	[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ].	self repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:49' prior: 33568561!exoInspect 	 	| listVar instVar |	listVar := self instVarNames.	instVar := listVar pop.	[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ].	self repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:49' prior: 33568853!exoInspect 	 	| listVar instVar |	listVar := self instVarNames.	instVar := listVar pop.	[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ].	self repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:49' prior: 33569145!exoInspect 	 	| listVar instVar |	listVar := self instVarNames.	instVar := listVar pop.	[[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ]].	self repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:50' prior: 33569437!exoInspect 	 	| listVar instVar |	listVar := self class instVarNames.	instVar := listVar pop.	[[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ]].	self repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:51' prior: 33569731!exoInspect 	 	| listVar instVar |	listVar := self class instVarNames.	instVar := listVar pop.	[[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ]] repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:51' prior: 33570031!exoInspect 	 	| listVar instVar |	listVar := self class instVarNames.	instVar := listVar pop.	[[ ^ self instVarNamed: instVar ]. [instVar := listVar pop ]] repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:54' prior: 33570324!exoInspect 	 	| listVar instVar |	listVar := self class instVarNames.	[ ^ self instVarNamed: [instVar := listVar pop ]] repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:57' prior: 33570617!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	[ listResult add: [^ self instVarNamed: [instVar := listVar pop ]]] repeatUntil: [ listVar isNotEmpty  ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:57' prior: 33570873!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	[ listResult add: [^ self instVarNamed: [instVar := listVar pop ]]] repeatUntil: [ listVar isNotEmpty  ].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 15:58' prior: 33571189!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	[ listResult add: [^ self instVarNamed: [instVar := listVar pop ]] value] repeatUntil: [ listVar isNotEmpty  ].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:04' prior: 33571520!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	[ listResult add: [^ self instVarNamed: [instVar := listVar pop ]] value.] repeatUntil: [ listVar isNotEmpty  ].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:05' prior: 33571857!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	[ listResult add: [^ self instVarNamed: [instVar := listVar firstIndent ]] value.] repeatUntil: [ listVar isNotEmpty  ].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:08' prior: 33572195!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :i | listResult  add: i].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:08' prior: 33572541!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :i | listResult  add: i value.].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:09' prior: 33572806!exoInspect 	 	| listVar instVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :i | listResult  add: i].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:09' prior: 33573078!exoInspect 	 	| listVar listResult |	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listResult  add: instVar ].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:13' prior: 33573343!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: instVar ].	listInst collect: [ :i | listResult add: [^ self instVarNamed: i ]].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:14' prior: 33573613!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ ^ self instVarNamed: instVar ]].	^ listResult.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:14' prior: 33573987!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ ^ self instVarNamed: instVar ]].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:17' prior: 33574315!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar collect: [ :instVar | listInst add: [ ^ self class instVarNamed: instVar ] ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:17' prior: 33574641!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ ^ self class instVarNamed: instVar ] ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:17' prior: 33574979!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ ^ self class instVarNamed: instVar ] value. ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:18' prior: 33575312!exoInspect 	 	| listVar listInst listResult|	listInst := LinkedList new.	listResult := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ ^ self instVarNamed: instVar ] value. ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:18' prior: 33575652!exoInspect 	 	| listVar listInst |	listInst := LinkedList new.	listVar := self class instVarNames.	listVar do: [ :instVar | listInst add: [ self instVarNamed: instVar ] value. ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:22' prior: 33575986!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result, instVar, ': {', [ self instVarNamed: instVar ] value, '} ' ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:22' prior: 33576277!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result, instVar, ': {', [ self instVarNamed: instVar ] value, '} ' ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:23' prior: 33576604!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result, instVar, ': {', (self instVarNamed: instVar ) printString, '} ' ].	^ listInst.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:23' prior: 33576931!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result, instVar, ': {', (self instVarNamed: instVar ) printString, '} ' ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:23' prior: 33577263!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result := result, instVar, ': {', (self instVarNamed: instVar ) printString, '} ' ].! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:23' prior: 33577582!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result := result, instVar, ': {', (self instVarNamed: instVar ) printString, '} ' ].	^ result.! !!Object methodsFor: 'introspection' stamp: 'RomeroGaetan 10/10/2022 16:24' prior: 33577911!exoInspect 	 	| listVar listInst result|	listInst := LinkedList new.	result := ''.	listVar := self class instVarNames.	listVar do: [ :instVar | result := result, instVar, ': {', (self instVarNamed: instVar ) printString, '} ' ].	^ result.! !----SNAPSHOT----2022-10-10T16:29:01.279878+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 12826!----QUIT----2022-10-10T16:29:06.462414+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 24066!