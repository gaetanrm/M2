----QUIT----2022-09-06T11:28:24.088812+02:00 Pharo9.0-SNAPSHOT-64bit-e1bb0fb.image priorSource: 0!----QUIT----2022-09-06T11:29:02.171389+02:00 Pharo9.0-SNAPSHOT-64bit-e1bb0fb.image priorSource: 0!Object subclass: #Pile	instanceVariableNames: 'contenu index capacite' 	classVariableNames: 'tailleDefaut'	package: 'HAI914I'!!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:35'!push: anObject	"met anObject dans contenu au bon index si la pile n'est pas pleine"	self isFull		ifFalse: [			index := index + 1.			contenu at: index put: anObject.]		ifTrue: [ self error: 'Impossible d''empiler sur une pile pleine' ]! !!Pile methodsFor: 'adding' stamp: 'RomeroGaetan 9/26/2022 18:37'!isEmpty	^index = 0! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:37'!isFull	^index = capacite.! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:38'!pop	"dépile et rend le sommet de pile si la pile n'est pas vide"	| retour |	self isEmpty		ifFalse: [			retour := contenu at: index.			index := index - 1.			^retour]		ifTrue: [ self error: 'Pile vide, Impossible de dépiler' ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:39'!top	"rend le sommet de pile si la pile n'est pas vide, sans dépiler"	self isEmpty		ifFalse: [ ^contenu at: index]		ifTrue: [ self error: 'Rien au sommet d''une pile vide' ]! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:41'!initialize: taille	"initialise les attribus d'une pile nouvellement créée"	"la pile est vide quand index = 0"	index := 0.	"la pile est pleine quand index = capacite"	capacite := taille.	"le contenu est représenté par un tableau"	contenu := Array new: capacite.! !!Pile methodsFor: 'initialization' stamp: 'RomeroGaetan 9/26/2022 18:43' prior: 33555943!initialize: taille	"initialise les attribus d'une pile nouvellement créée"	"la pile est vide quand index = 0"	index := 0.	"la pile est pleine quand index = capacite"	capacite := taille.	"le contenu est représenté par un tableau"	contenu := Array new: capacite.		self assert: (self isEmpty).! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:44'!printOn: aStream	"Cette méthode est appelée par la méthode printString qui fabrique une représentation du    receveur sous forme de chaîne.	 PrintString est elle-même appelée par les outils de l'environnement, par exemple par la    méthode printIt du Playground."		aStream nextPutAll: 'une Pile, de taille: '.	capacite printOn: aStream.	aStream nextPutAll: ' contenant: '.	index printOn: aStream.	aStream nextPutAll: ' objets : ('.	contenu do: [ :each | each printOn: aStream. aStream space ].	aStream nextPut: $).! !!Pile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:46'!grow	| nb oldc |	nb := self size.	oldc := contenu.	capacite := capacite * 2.	contenu := Array new: capacite.	0 to: nb do: [ :i |  self push: (oldc at: i)]! !TestCase subclass: #TestPile	instanceVariableNames: 'standard pleine vide'	classVariableNames: ''	package: 'HAI914I'!!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!setUp	"une pile vide"	vide := Pile new initialize: 3.		"une pile dans un état quelconque, ni vide ni pleine"	standard := Pile new initialize: 4.	standard push: 1.		"une pile pleine"	pleine := Pile new initialize: 2.	pleine push: 1.	pleine push: 2.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!testEqual	| copy |	copy := standard shallowCopy.	self assert: standard equals: copy.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:55'!testPush	self should: [ pleine push: #anything ] raise: Error.	self testPush: vide.	self testPush: standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:57' prior: 33558200!testPush	self should: [ pleine push: #anything ] raise: Error.	self vide.	self standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:57' prior: 33558400!testPush	self should: [ pleine push: #anything ] raise: Error.	self testPush: vide.	self testPush: standard.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:58'!testVide	self assert: vide isEmpty! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:58'!testPop: unePile	"attention à ce que standard reste standard, ni vide ni pleine, pour les autres méthodes de test"	| p1 p2 |	p1 := unePile top.	p2 := unePile pop.	self deny: unePile isFull.	self assert: p2 equals: p1.	unePile push: p1.	self assert: unePile top equals: p2.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testPop	self should: [ vide pop ] raise: Error.	self testPop: standard.	self testPop: pleine.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testEquals	self assert: standard = standard.! !!TestPile methodsFor: 'tests' stamp: 'RomeroGaetan 9/26/2022 18:59' prior: 33559452!testEquals	self assert: standard = standard! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 18:59'!testFull	self assert: pleine isFull.	self deny: standard isFull.	self deny: vide isFull.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:00'!testPush: unePile	| sauve |	sauve := unePile.	unePile push: 33.	self deny: unePile isEmpty.	self assert: unePile top equals: 33.	self assert: unePile pop equals: 33.	"on laisse la pile dans l'état ou elle était en entrant"	self assert: unePile equals: sauve.! !!TestPile methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:00'!testEmpty	"vide, standard et pleine référencent des piles  créées dans la méthode setUp"	self assert: vide isEmpty.	self deny: standard isEmpty.	self deny: pleine isEmpty.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:02'!initialize 	tailleDefaut := 5.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:08'!new 	^super initialize.! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:10'!new: taille	taille	ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]	ifNotNil: [ ^super initialize: tailleDefaut  ]! !!Pile class methodsFor: 'instance creation' stamp: 'RomeroGaetan 9/26/2022 19:11' prior: 33560752!new: taille	taille		ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]		ifNotNil: [ ^super initialize: tailleDefaut  ]! !----SNAPSHOT----2022-09-26T19:13:16.834092+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 100!!Pile class methodsFor: 'instance creation' stamp: 'RomeroGaetan 9/26/2022 19:13' prior: 33560986!new: taille	taille		ifNil: [ self error: 'Pas vraiment intelligent de faire ça' ]		ifNotNil: [ ^super new initialize: taille.  ]! !!Pile class methodsFor: 'as yet unclassified' stamp: 'RomeroGaetan 9/26/2022 19:15'!example	| p |	p := Pile new.	p push: 12.	p push: 3.	p push: 4.	p top.	p pop.	p push: 45.	p push: 34.	p isFull.	p isEmpty.	^p.	! !!Pile class methodsFor: 'examples' stamp: 'RomeroGaetan 9/26/2022 19:15' prior: 33561549!example	| p |	p := self new.	p push: 12.	p push: 3.	p push: 4.	p top.	p pop.	p push: 45.	p push: 34.	p isFull.	p isEmpty.	^p.	! !----SNAPSHOT----2022-09-26T19:20:35.957946+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 6690!----QUIT----2022-09-26T19:20:44.270426+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 7492!----QUIT/NOSAVE----2022-09-26T19:29:14.339145+02:00 Pharo 9.0 - 64bit (old stable)2.image priorSource: 7599!