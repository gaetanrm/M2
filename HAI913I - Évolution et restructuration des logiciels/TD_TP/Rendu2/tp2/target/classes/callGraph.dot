strict digraph G {
  1 [ label="Node.Node" ];
  2 [ label="Node.getNode" ];
  3 [ label="Pair.Pair" ];
  4 [ label="Pair.getMethod" ];
  5 [ label="Pair.getNumberOfLines" ];
  6 [ label="Edge.Edge" ];
  7 [ label="Edge.getNodeSource" ];
  8 [ label="Edge.getNodeTarget" ];
  9 [ label="UserInterface.UserInterface" ];
  10 [ label="UserInterface.printCLI" ];
  11 [ label="Scanner.nextInt" ];
  12 [ label="ArrayList.get" ];
  13 [ label="UserInterface.getTypeVisitor" ];
  14 [ label="UserInterface.setTypeVisitor" ];
  15 [ label="Parser.main" ];
  16 [ label="listJavaFilesForFolder" ];
  17 [ label="userChoice" ];
  18 [ label="Scanner.next" ];
  19 [ label="String.equals" ];
  20 [ label="Parser.listJavaFilesForFolder" ];
  21 [ label="File.listFiles" ];
  22 [ label="File.isDirectory" ];
  23 [ label="ArrayList.addAll" ];
  24 [ label="File.getName" ];
  25 [ label="ArrayList.add" ];
  26 [ label="Parser.parse" ];
  27 [ label="ASTParser.setResolveBindings" ];
  28 [ label="ASTParser.setKind" ];
  29 [ label="ASTParser.setBindingsRecovery" ];
  30 [ label="ASTParser.setCompilerOptions" ];
  31 [ label="ASTParser.setUnitName" ];
  32 [ label="ASTParser.setEnvironment" ];
  33 [ label="ASTParser.setSource" ];
  34 [ label="ASTParser.createAST" ];
  35 [ label="Parser.userChoice" ];
  36 [ label="parseFilesClass" ];
  37 [ label="parseFilesMethod" ];
  38 [ label="printCallGraph" ];
  39 [ label="TypeDeclarationVisitor.sizeList" ];
  40 [ label="TypeDeclarationVisitor.printTypeDeclaration" ];
  41 [ label="parse" ];
  42 [ label="String.toCharArray" ];
  43 [ label="countLineNumber" ];
  44 [ label="MethodDeclarationVisitor.sizeList" ];
  45 [ label="MethodDeclarationVisitor.printMethodDeclaration" ];
  46 [ label="parseFilesPackage" ];
  47 [ label="PackageDeclarationVisitor.sizeList" ];
  48 [ label="PackageDeclarationVisitor.printPackageDeclaration" ];
  49 [ label="TypeDeclarationVisitor.averageNumberOfMethods" ];
  50 [ label="averageNumberOfLinesPerMethods" ];
  51 [ label="MethodDeclarationVisitor.getNumberOfLines" ];
  52 [ label="MethodDeclarationVisitor.getMethods" ];
  53 [ label="TypeDeclarationVisitor.averageNumberOfVariables" ];
  54 [ label="TypeDeclarationVisitor.printTypeDeclaration10PourcentMethod" ];
  55 [ label="TypeDeclaration.getName" ];
  56 [ label="TypeDeclaration.getMethods" ];
  57 [ label="TypeDeclarationVisitor.printTypeDeclaration10PourcentVariable" ];
  58 [ label="TypeDeclaration.getFields" ];
  59 [ label="TypeDeclarationVisitor.printTypeDeclarationWithXMethods" ];
  60 [ label="BestMethodPerClass" ];
  61 [ label="MethodDeclarationVisitor.printMethodWithMaxParam" ];
  62 [ label="Parser.parseFilesClass" ];
  63 [ label="classInfo" ];
  64 [ label="Parser.parseFilesMethod" ];
  65 [ label="methodInfo" ];
  66 [ label="Parser.parseFilesPackage" ];
  67 [ label="packageInfo" ];
  68 [ label="Parser.classInfo" ];
  69 [ label="CompilationUnit.accept" ];
  70 [ label="Parser.methodInfo" ];
  71 [ label="Parser.packageInfo" ];
  72 [ label="Parser.countLineNumber" ];
  73 [ label="CompilationUnit.getLineNumber" ];
  74 [ label="CompilationUnit.getLength" ];
  75 [ label="Parser.averageNumberOfLinesPerMethods" ];
  76 [ label="MethodDeclarationVisitor.numberOfLinesOfMethodsPerFiles" ];
  77 [ label="Parser.BestMethodPerClass" ];
  78 [ label="TypeDeclarationVisitor.print10PourcentMethodPerClass" ];
  79 [ label="Parser.printCallGraph" ];
  80 [ label="PackageDeclarationVisitor.visit" ];
  81 [ label="sortedPackagesList" ];
  82 [ label="PackageDeclarationVisitor.getPackages" ];
  83 [ label="List.size" ];
  84 [ label="PackageDeclaration.getName" ];
  85 [ label="PackageDeclarationVisitor.sortedPackagesList" ];
  86 [ label="List.add" ];
  87 [ label="VariableDeclarationFragmentVisitor.visit" ];
  88 [ label="VariableDeclarationFragmentVisitor.getVariables" ];
  89 [ label="MethodDeclarationVisitor.visit" ];
  90 [ label="MethodDeclaration.getName" ];
  91 [ label="List.get" ];
  92 [ label="MethodDeclaration.parameters" ];
  93 [ label="TypeDeclarationVisitor.visit" ];
  94 [ label="TypeDeclarationVisitor.getTypes" ];
  95 [ label="bestChoiceMethod" ];
  96 [ label="TypeDeclarationVisitor.bestChoiceMethod" ];
  97 [ label="List.contains" ];
  98 [ label="bestChoiceVariable" ];
  99 [ label="TypeDeclarationVisitor.bestChoiceVariable" ];
  100 [ label="lineNumberPerMethod" ];
  101 [ label="bestChoiceMethodLines" ];
  102 [ label="TypeDeclarationVisitor.bestChoiceMethodLines" ];
  103 [ label="TypeDeclarationVisitor.lineNumberPerMethod" ];
  104 [ label="MethodDeclaration.getStartPosition" ];
  105 [ label="MethodDeclaration.getLength" ];
  106 [ label="MethodInvocationVisitor.visit" ];
  107 [ label="MethodInvocationVisitor.getMethods" ];
  108 [ label="MethodInvocationVisitor.getSuperMethod" ];
  10 -> 11;
  10 -> 12;
  15 -> 16;
  15 -> 13;
  15 -> 10;
  15 -> 17;
  15 -> 18;
  15 -> 19;
  20 -> 21;
  20 -> 22;
  20 -> 23;
  20 -> 16;
  20 -> 24;
  20 -> 25;
  26 -> 27;
  26 -> 28;
  26 -> 29;
  26 -> 30;
  26 -> 31;
  26 -> 32;
  26 -> 33;
  26 -> 34;
  35 -> 36;
  35 -> 37;
  35 -> 38;
  35 -> 39;
  35 -> 40;
  35 -> 41;
  35 -> 42;
  35 -> 43;
  35 -> 44;
  35 -> 45;
  35 -> 46;
  35 -> 47;
  35 -> 48;
  35 -> 49;
  35 -> 50;
  35 -> 51;
  35 -> 52;
  35 -> 53;
  35 -> 54;
  35 -> 55;
  35 -> 56;
  35 -> 57;
  35 -> 58;
  35 -> 59;
  35 -> 11;
  35 -> 60;
  35 -> 61;
  62 -> 41;
  62 -> 42;
  62 -> 63;
  64 -> 41;
  64 -> 42;
  64 -> 65;
  66 -> 41;
  66 -> 42;
  66 -> 67;
  68 -> 69;
  70 -> 69;
  71 -> 69;
  72 -> 73;
  72 -> 74;
  75 -> 41;
  75 -> 42;
  75 -> 65;
  75 -> 76;
  77 -> 41;
  77 -> 42;
  77 -> 63;
  77 -> 78;
  80 -> 81;
  47 -> 83;
  48 -> 84;
  85 -> 84;
  85 -> 86;
  87 -> 86;
  89 -> 86;
  44 -> 83;
  45 -> 90;
  76 -> 83;
  76 -> 73;
  76 -> 91;
  61 -> 92;
  61 -> 90;
  93 -> 86;
  39 -> 83;
  40 -> 55;
  49 -> 56;
  49 -> 83;
  53 -> 58;
  53 -> 83;
  54 -> 83;
  54 -> 86;
  54 -> 95;
  96 -> 97;
  96 -> 56;
  57 -> 83;
  57 -> 86;
  57 -> 98;
  99 -> 97;
  99 -> 58;
  59 -> 56;
  59 -> 55;
  78 -> 83;
  78 -> 91;
  78 -> 100;
  78 -> 86;
  78 -> 101;
  78 -> 4;
  78 -> 5;
  102 -> 83;
  102 -> 91;
  102 -> 97;
  102 -> 5;
  103 -> 73;
  103 -> 104;
  103 -> 105;
  103 -> 86;
  106 -> 86;
}
